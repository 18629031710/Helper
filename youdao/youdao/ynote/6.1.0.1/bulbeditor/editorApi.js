/** This file is automatically generated by BulbEditor builder **/

define(function () {
    return {

/*********************./src/pc/io/editorApi.js START *********************/


        /**
        * PC uses it to get all the resource when saving note,
        * so that the PC can kown what resources are added or deleted
        * @return {String} json string
        */
        getResourceMap: function(){
        },

        /**Overridden
        * Called by PC to input the Note content with resourceMap and noteProps
        * @param {String} content  xml or html  content
        * @param {String} resMapStr  The json string of resource map
        *      The note is on collaborative editing or not
        *      The default value is `false`
        * @param {String} propsJSONStr -- JSON like string. the format is
        * {
        *  scrollPercent:<number>,
        *  isReadOnly:<boolean>,
        *  bgImageId:<string>,
        *  isCollabEnabled:<boolean>,
        *  disableBackground:<boolean>,
        *  hasOriginFile:<boolean>,
        *  isOCR:<boolean>,  -- whether the content is OCR JSON
        *  disableOCR:<boolean> -- disable OCR item menu in context menu
        * }
        * @param {String} callbackUID -- this is an async function, so support
        *  callback
        * @return
        * {
        *  {Number} resultCode -- 1 means success, others mean failure
        *  {String} message
        * }
        */
        setContent: function(content, resMapStr,propsJSONStr,callbackUID){
        },

        /**
        * PC uses it to save the scroll percent when note is quitting,
        * so that when the note is re-opened, the pc will tell editor the
        * last scroll percent
        * @return {Integer}
        */
        getScrollPercent: function(){
        },

        /** ASYNC
        * @param {String} callbackUID -- this is an async function, so support
        *  callback
        * @param {boolean} stopRendering -- if stop rendering content into noteview
        * will use the value to decide whether stop the rendering work
        */
        getContent: function(callbackUID, stopRendering){
        },

        /**
        * ASYNC
        * @param {String} callbackUID -- this is an async function, so support
        *  callback
        * @param {boolean} stopRendering -- if stop rendering content into noteview
        * will use the value to decide whether stop the rendering work
        * 获取编辑器 HTML 文本
        * @returns {String}
        */
        getHtmlContent: function(callbackUID, stopRendering){
        },

        /**
        * 插入附件
        * @param {String} infoStr  the json string of info object
        *
        *
        * @type {Object} info
        * @type {String} info.source 附件缩略图id/url
        * @type {String} info.localSource 附件本地缩略图id/url
        * @type {String} info.resource  附件资源文件id/url
        * @type {String} info.localResource 附件本地资源文件id/url
        * @type {String} info.fileName 资源名
        * @type {Integer} info.fileLength 文件长度
        * @type {Boolean} info.retained 是否保留插入位置的原来内容
        */
        insertAttachment: function(infoStr){
        },

        /**
        * 更新附件相关信息
        *
        * @param {String} resource  附件资源文件id/url
        * @param {String} infoStr  参见 `insertAttachment()` 方法的参数
        * @param {Boolean} [triggerContentChange = true]
        * @param {String} [blockdId]  图片/附件所在的 block 的 id
        */
        updateAttachment: function(resource, infoStr,triggerContentChange,blockId){
        },

        /**
        * 插入图片
        * @param {String} source 图片id/url
        * @param {String} localSource 图片本地id/url
        * @param {Boolean} retained 是否保留插入位置的内容
        */
        insertImage: function(source, localSource,retained,width,height){
        },

        /**
        * Insert Horizontal line
        * @return {number} -- resultCode
        */
        insertHorizontalLine: function(){
        },

        /**
        * Insert Hyperlink
        * @param {string} src
        * @return {number} -- resultCode
        */
        insertHyperlink: function(src){
        },

        /**
        * Insert a empty table
        * @param {number} rowCount
        * @param {number} colCount
        * @return {number} -- resultCode
        */
        insertTable: function(rowCount, colCount){
        },

        /**
        * Insert a Catalogue
        * @return {number} 1 means success, others means failure
        */
        insertCatalogue: function(){
        },

        /**
        * Obsolete After PC 6.0
        * @param {String} source 图片id/url
        * @param {String} [newSource] 图片id/url, 可选
        * @param {String} [newLocalSource] 图片本地id/url, 可选
        * @param {Boolean} [triggerContentChange=true]
        * @param {String} [blockdId]  图片/附件所在的 block 的 id
        */
        /*jshint maxparams:7*/
        updateImage: function(source, newSource,newLocalSource,triggerContentChange,blockId,width,height){
        },

        /**
        * 触发一个事件
        * @param {String} eventName
        * @param {Object} [eventParam]
        */
        triggerEvent: function(eventName){
        },

        /**
        * 插入内部笔记链接
        * @param {String} noteId
        * @param {String} noteTitle
        */
        insertNoteLink: function(noteId, noteTitle){
        },

        /**
        * 右键回调
        * @param {Integer} index 被选择菜单项在ContextMemu.indexArray的index
        */
        selectCtxMenu: function(index){
        },

        /**
        * CEF 粘贴内容
        * @param {String} content 待粘贴的内容
        *
        * @param {Integer} contentType 内容类型 @see DO_PASTE_CONTENT_TYPE
        *
        * @param {Boolean} isPasteAsText 是否把内容粘贴为纯文本
        *
        * @param {Integer} [source=1] 内容来源 @see DO_PASTE_SOURCE
        *      仅当contentType = DO_PASTE_CONTENT_TYPE.HTML 时有效
        *
        * @param {String} resMapStr @see setContent()
        *      仅当isPasteAsText 为 false 时有效
        *
        * @param {Boolean} discardAttachment 是否放弃附件的粘贴
        */
        /*jshint maxlen:500, maxcomplexity:16, maxparams:6*/
        doPaste: function(content, contentType,isPasteAsText,source,resMapStr,discardAttachment){
        },

        /**
        * 多个值用英文空格分开
        * @param {String} str
        */
        highlight: function(str){
        },

        clearHighlight: function(){
        },

        enterFullScreen: function(){
        },

        exitFullScreen: function(){
        },

        /**
        * @param {String} title
        */
        enterPresentation: function(title){
        },

        /**
        * Obsolete after PC 6.0
        * 默认是阅读视图模式
        *
        * @param {Number} viewMode -- 0:普通视图，1:阅读视图，2:文档视图
        */
        setPageMode: function(viewMode){
        },

        /**
        * used to set ShortCut
        * @param {JsonString} shortCuts
        * @example
        *      var arr = JSON.parse(shortCuts);
        *      console.log(arr[0]);
        *
        *      {
        *        name : {String} 目前支持 `insertDate`
        *        ctrl : {Boolean}
        *        alt : {Boolean}
        *        shift : {Boolean}
        *        keyCode : {Integer|String}
        *
        *      }
        */
        setShortCut: function(shortCuts){
        },

        /**
        * used to set DefaultFont
        * @param {String} fontName
        * @param {Integer} fontSize
        */
        setDefaultFont: function(fontName, fontSize){
        },

        /**
        * Obsolete after PC 6.0
        * @param {Boolean} show
        */
        showSaveSyncButton: function(show){
        },

        /**
        * Obsolete after PC 6.0
        * @param {Boolean} shouldRotate
        */
        rotateSaveSyncIcon: function(shouldRotate){
        },

        /**
        * 设置编辑器光标位置
        * @param {Number} left 插入位置相对于整个 CEF 界面左边的距离, px
        * @param {Number} top 插入位置相对于整个 CEF 界面上边的距离, px
        */
        setCaretPosition: function(left, top){
        },

        /**
        * 判断光标是否在第一个段落前 limit 个文字内.
        * @param {Integer} [limit = 80]
        * @returns {BOOL}
        */
        isCaretInFirstTextLine: function(limit){
        },

        /**
        * 返回第一个文本段落(包含表格)的文本
        * @return {String}
        */
        getFirstLineTextContent: function(){
        },

        /**
        *
        */
        focusEditor: function(){
        },

        /**
        * 获取一个坐标下的单词信息，提供给词典用
        * @param {Number} left 相对于 CEF 窗口左边的距离
        * @param {Number} top 相对于 CEF 窗口上边的距离
        * @returns {String} 光标所指字母在字符串中的位置|光标下文本节点的全部内容<br />
        * 例如返回：0|abcdefghijklmn 说明用户光标在a的左半边<br />
        * 例如返回：14|abcdefghijklmn 说明用户光标在n的右半边<br />
        * 例如返回：10|abcdefghijklmn 说明用户光标在j的右半边到k的左半边之间<br />
        * 如果鼠标下没有任何内容，则返回一个空字符串
        */
        getWordInfoFromPosition: function(left, top){
        },

        /**
        * Obsolete after PC 6.0
        * 设置编辑器缩放接口
        *
        * @param {Number} deltaOrPercent: 表示wheel移动的增量或者缩放比率：
        如果是增量，则正值表示向上移动，负值表示向下移动，绝对值的大小表示滚动的距离
        如果是比率，那就是一個正值，例如150
        @param {boolean} isPercent: 表示传入的值是不是缩放比率
        */
        setZoomPercent: function(deltaOrPercent, isPercent){
        },

        /**
        * Overridden and Async Method
        * @param {String} propsJSONStr -- ws connect options:
        * {
        *  shareKey:<string, a UID for note, e.g. groupId_noteId>
        *  sessionType:<number, 0=normal, 1=readonly, 2=noteowner>
        *  sessionId<string, it is optional>
        * }
        * @param {String} callbackUID -- callback UID
        */
        buildCollabSession: function(propsJSONStr, callbackUID){
        },

        /** Overridden and Async method
        * get the collab content which the content matches with the note version,
        * i.e. don't return the content untill there is no pending-to-send data command
        * @param {String} callbackUID -- this is an async function, so support
        *  callback
        * @param {boolean} stopRendering -- if stop rendering content to noteview
        *  and the note will also be set to be readOnly
        * @return {Object} R
        * @return {number} R.status --  0 means NotReady; 1 means Ready
        * @return {number} R.version --  the note version
        * @return {string} R.content --  the note content
        * @return {number} R.sessionCount --  current collab session count
        */
        getCollabContent: function(callbackUID, stopRendering){
        },

        /**
        * Overridden and ASYNC METHOD
        * @param {number} targetNoteVersion
        * @param {String} callbackUID -- this is an async function, so support
        *  callback
        * @return {Object} R
        * @return {number} R.status --  0 means NotReady; 1 means Ready; 2 means error
        * @return {number} R.startVersion --  the start note version
        * @return {number} R.endVersion -- the end note version
        * @return {Array} R.modifiers  -- {modifiers:[{userId:123},{userId:456},{userId:789}]}
        * @return {number} R.errorCode -- 0 means not-collab-eanbled; 1 means invalid noteversion
        */
        getModifiers: function(targetNoteVersion, callbackUID){
        },

        /**
        * Overridden
        * Obsolete after PC 6.0
        * Called before getCollabContent
        */
        isReadyToClose: function(){
        },

        /**
        * Overridden
        * Obsolete after PC 6.0
        * @param {JSON-like String or JSONObject} options
        */
        resetEditorOptions: function(optionsJSONStr){
        },

        /**
        * Overridden
        * Called before opening another content(i.e. setContent)
        */
        reset: function(options){
        },

        /**
        * Overridden
        * called by PC to notify the editor then collab server after saving suceeds
        * @param {number} savedNoteVersion
        * @param {boolean} isHistorySave
        */
        saveNotification: function(savedNoteVersion, isHistorySave){
        },

        /**
        * Overridden
        * Obsolete after PC 6.0
        */
        toggleAttendeeHint: function(show){
        },

        /**
        * toggle the toolbar
        * @param {boolean or string or null}
        *  true means show, false means hide, null means toggle
        */
        toggleToolbar: function(show){
        },

        /**
        * New For PC 6.0
        * For PC, the BulbEditor is initialized by Editor in pc.js, so PC is NOT able to
        * input any parameters when BulbEditor constructs.
        * So here we expose the method for PC to initialize the Editor with specified params
        * which is releated with Editor but not note.
        * NOTE: in theory, the method is ONLY called one-time
        * @param {String} propJSONStr -- a JSON-format string, and the JSON format is like:
        *  defaultFontName:<string>, defaultFontSize:number,
        *  backgroundURIJSON:<JSONObject>, isVIPUser:<boolean>,
        *  shortCutsJSON:<JSONObject>,
        *  viewMode:<number, 0:普通视图，1:阅读视图，2:文档视图>,
        *  showSaveSyncButton:<boolean>,
        *  zoomValue:<number>, isZoomPercent:<boolean>,
        *  collabServer:<JSONObject, format is {address:'10.1.1.1:8000',useWSS:<boolean>}>,
        *  userInfo:<JSONObject, format is {userId:<string>, nickname:<string>, portraitUrl:<string>}>
        *  }
        */
        initializeEditor: function(propJSONStr){
        },

        /**
        * Overridden
        */
        closeCollabSession: function(){
        },

        /**
        * update the userInfo, e.g. the nickname, portraitUrl
        * @param {String} -- userInfo JSON String, whose format is like
        *  {nickname:<string>, portraitUrl:<string>}
        */
        updateUserInfo: function(userInfoStr){
        },

        /**
        * 插入待办事项
        */
        insertTodo: function(){
        },

        /**
        * 提供需要被Native禁止的外层按钮名称列表
        * @return {Array<string>}
        */
        getNativeDisabledToolbarItemNames: function(){
        },

/*********************./src/pc/io/editorApi.js END *********************/

    };
});