{"version":3,"file":"static/webpack/1.55770142c27a647b6d9c.hot-update.js","sources":["webpack:///./src/scripts/common/ydmind-new/Layout/lineStrategy/getLinesArray.js"],"sourcesContent":["import { Bezier, Straight, StraightWithArc, LineType } from './Line';\nimport { arcRadius, LineTypeMap } from '../../constant';\n\nconst LineMap = {\n  Bezier,\n  Straight,\n  StraightWithArc,\n};\n\nconst processDirection = (direction, node) => {\n  return node.index === 1 && direction === 'bottom_catalog' ? 'bottom' : direction;\n};\n\nconst processLineType = (lineType, direction, node) => {\n  const c1 = direction === 'bottom';\n  const c2 = direction === 'bottom_catalog' && node.index === 1;\n  const c3 = direction === 'top';\n  const c4 = direction === 'top_catalog' && node.index === 1;\n  const c = c1 || c2 || c3 || c4;\n  if (c && LineTypeMap[lineType].line === LineType.StraightWithArc && !node.isFirstOrLast()) {\n    return LineType.Straight;\n  }\n  return LineTypeMap[lineType].line;\n};\n\nexport default function getLinesArray(nodesArray, lineType, direction) {\n  let linesArray = [];\n  nodesArray.forEach(node => {\n    const directionProcessed = processDirection(direction, node);\n    const typeProcessed = processLineType(lineType, direction, node);\n    const line = new LineMap[typeProcessed]({\n      node,\n      direction: directionProcessed,\n      radius: arcRadius,\n      lineType,\n    });\n\n    const pushToLinesArray = linePath => {\n      if (linePath && linesArray.indexOf(linePath) === -1) {\n        linesArray.push(linePath);\n      }\n    };\n    // 获取收起后的小折线\n    if (!node.expanded && !node.isHidden()) {\n      pushToLinesArray(line.getExpand());\n    }\n\n    pushToLinesArray(line.draw());\n  });\n  return linesArray;\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}